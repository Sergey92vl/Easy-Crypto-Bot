#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import json
import time
import threading
import logging
from typing import Dict, List, Optional
from datetime import datetime
import pandas as pd
import numpy as np
import ccxt
from dotenv import load_dotenv

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò =====

class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    def __init__(self):
        self.settings = {
            'default_language': 'en',
            'trading_mode': 'paper',
            'default_exchange': 'binance',
            'watchlist': ['BTC/USDT', 'ETH/USDT', 'BNB/USDT'],
            'update_interval': 5,
            'analysis_interval': 10,
            'monitoring_interval': 60
        }
    
    def get_setting(self, key):
        return self.settings.get(key)

# ===== –ú–ù–û–ì–û–Ø–ó–´–ß–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê =====

class LanguageManager:
    def __init__(self, language: str = 'en'):
        self.language = language
        self.translations = self._load_translations()
    
    def _load_translations(self) -> Dict:
        translations = {
            'en': {
                'welcome': 'üöÄ Welcome to AI Crypto Trading Agent',
                'initializing_agent': 'Initializing trading agent...',
                'shutdown': 'Shutting down agent...',
                'error': '‚ùå Error',
                'initializing_components': 'Initializing components...',
                'api_keys_required': 'API keys required for live trading',
                'api_keys_missing': 'API keys are missing',
                'initialization_complete': '‚úÖ Initialization complete',
                'starting_agent': 'Starting trading agent',
                'data_error': 'Data error',
                'trading_error': 'Trading error',
                'monitoring_error': 'Monitoring error',
                'shutting_down': 'Shutting down...',
                'shutdown_complete': '‚úÖ Shutdown complete',
                'buy_signal': 'üìà Buy signal detected',
                'sell_signal': 'üìâ Sell signal detected',
                'stop_loss_triggered': 'üî¥ Stop loss triggered',
                'take_profit_triggered': 'üü¢ Take profit triggered',
                'connection_success': '‚úÖ Connected to exchange successfully',
                'connection_failed': '‚ùå Connection to exchange failed'
            },
            'ru': {
                'welcome': 'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π',
                'initializing_agent': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...',
                'shutdown': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞...',
                'error': '‚ùå –û—à–∏–±–∫–∞',
                'initializing_components': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...',
                'api_keys_required': 'API –∫–ª—é—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏',
                'api_keys_missing': 'API –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                'initialization_complete': '‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                'starting_agent': '–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞',
                'data_error': '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                'trading_error': '–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏',
                'monitoring_error': '–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
                'shutting_down': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...',
                'shutdown_complete': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                'buy_signal': 'üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É',
                'sell_signal': 'üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É',
                'stop_loss_triggered': 'üî¥ –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å',
                'take_profit_triggered': 'üü¢ –°—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç',
                'connection_success': '‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ',
                'connection_failed': '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ'
            }
        }
        return translations.get(self.language, translations['en'])
    
    def get_text(self, key: str) -> str:
        return self.translations.get(key, key)
    
    def set_language(self, language: str):
        self.language = language
        self.translations = self._load_translations()

# ===== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï =====

def setup_logger(name: str, language: str = 'en') -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–∞"""
    logger = logging.getLogger(name)
    
    if not logger.handlers:
        logger.setLevel(logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
        file_handler = logging.FileHandler(f'trading_agent_{language}.log')
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    
    return logger

# ===== –ë–ê–ó–û–í–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò =====

class BaseStrategy:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    def __init__(self):
        self.name = "base_strategy"
    
    def generate_signal(self, data: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        return 'hold'

class RSIStrategy(BaseStrategy):
    """RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    def __init__(self, period: int = 14, overbought: int = 70, oversold: int = 30):
        super().__init__()
        self.period = period
        self.overbought = overbought
        self.oversold = oversold
        self.name = "rsi_strategy"
    
    def calculate_rsi(self, data: pd.Series) -> pd.Series:
        """–†–∞—Å—á–µ—Ç RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        delta = data.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=self.period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=self.period).mean()
        
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi
    
    def generate_signal(self, data: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI"""
        if len(data) < self.period + 1:
            return 'hold'
        
        try:
            rsi = self.calculate_rsi(data['close'])
            current_rsi = rsi.iloc[-1]
            
            if pd.isna(current_rsi):
                return 'hold'
                
            if current_rsi < self.oversold:
                return 'buy'
            elif current_rsi > self.overbought:
                return 'sell'
            else:
                return 'hold'
        except Exception as e:
            return 'hold'

class MACDStrategy(BaseStrategy):
    """MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    def __init__(self, fast_period: int = 12, slow_period: int = 26, signal_period: int = 9):
        super().__init__()
        self.fast_period = fast_period
        self.slow_period = slow_period
        self.signal_period = signal_period
        self.name = "macd_strategy"
    
    def calculate_macd(self, data: pd.Series) -> tuple:
        """–†–∞—Å—á–µ—Ç MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        ema_fast = data.ewm(span=self.fast_period).mean()
        ema_slow = data.ewm(span=self.slow_period).mean()
        macd = ema_fast - ema_slow
        signal = macd.ewm(span=self.signal_period).mean()
        histogram = macd - signal
        return macd, signal, histogram
    
    def generate_signal(self, data: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ MACD"""
        if len(data) < self.slow_period + self.signal_period:
            return 'hold'
        
        try:
            macd, signal, _ = self.calculate_macd(data['close'])
            
            if macd.iloc[-1] > signal.iloc[-1] and macd.iloc[-2] <= signal.iloc[-2]:
                return 'buy'
            elif macd.iloc[-1] < signal.iloc[-1] and macd.iloc[-2] >= signal.iloc[-2]:
                return 'sell'
            else:
                return 'hold'
        except Exception as e:
            return 'hold'

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• =====

class DataHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self, exchange: str, language: str = 'en'):
        self.exchange_name = exchange
        self.language = language
        self.lang_manager = LanguageManager(language)
        self.logger = setup_logger('data_handler', language)
        
        self.market_data = {}
        self.watchlist = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è exchange
        try:
            exchange_class = getattr(ccxt, exchange)
            self.exchange = exchange_class({
                'enableRateLimit': True,
                'timeout': 30000
            })
            self.logger.info(self.lang_manager.get_text('connection_success'))
        except Exception as e:
            self.logger.error(f"{self.lang_manager.get_text('connection_failed')}: {e}")
            self.exchange = None
    
    def initialize(self, api_key: str = None, api_secret: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å API –∫–ª—é—á–∞–º–∏"""
        if api_key and api_secret and self.exchange:
            self.exchange.apiKey = api_key
            self.exchange.secret = api_secret
    
    def update_market_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.exchange:
            return
        
        for symbol in self.watchlist:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö
                ohlcv = self.exchange.fetch_ohlcv(symbol, '1m', limit=100)
                df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                df.set_index('timestamp', inplace=True)
                
                self.market_data[symbol] = df
                
            except Exception as e:
                self.logger.error(f"Error updating data for {symbol}: {e}")
    
    def get_market_data(self, symbol: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª—É"""
        return self.market_data.get(symbol)
    
    def get_watchlist(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        return self.watchlist
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if hasattr(self, 'exchange'):
            try:
                self.exchange.close()
            except:
                pass

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò =====

class RiskManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    def __init__(self, language: str = 'en'):
        self.language = language
        self.lang_manager = LanguageManager(language)
        self.logger = setup_logger('risk_manager', language)
        
        self.settings = {
            'max_position_size': 0.1,  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            'stop_loss': 0.02,  # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å
            'take_profit': 0.05,  # 5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            'max_daily_loss': 0.03,  # 3% –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫
        }
    
    def check_risk(self, signal: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–¥–µ–ª–∫–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–æ–≤
        return True
    
    def calculate_position_size(self, signal: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        return 0.01  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
    
    def monitor_risk(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤
        pass

# ===== –¢–û–†–ì–û–í–´–ô –î–í–ò–ñ–û–ö =====

class TradingEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫"""
    def __init__(self, exchange: str, mode: str, language: str, 
                 data_handler, risk_manager):
        self.exchange_name = exchange
        self.mode = mode
        self.language = language
        self.data_handler = data_handler
        self.risk_manager = risk_manager
        self.lang_manager = LanguageManager(language)
        self.logger = setup_logger('trading_engine', language)
        
        self.strategies: Dict[str, BaseStrategy] = {}
        self.positions: Dict = {}
        self.initialize_strategies()
    
    def initialize_strategies(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        self.strategies['rsi'] = RSIStrategy()
        self.strategies['macd'] = MACDStrategy()
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        self.logger.info(self.lang_manager.get_text('initializing_components'))
        
        if self.mode == 'live':
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ exchange
            try:
                exchange_class = getattr(ccxt, self.exchange_name)
                self.exchange = exchange_class({
                    'apiKey': os.getenv(f'{self.exchange_name.upper()}_API_KEY'),
                    'secret': os.getenv(f'{self.exchange_name.upper()}_API_SECRET'),
                    'enableRateLimit': True
                })
                self.logger.info(f"Live trading initialized for {self.exchange_name}")
            except Exception as e:
                self.logger.error(f"Failed to initialize live trading: {e}")
                self.exchange = None
        else:
            # –ë—É–º–∞–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
            self.exchange = None
            self.logger.info("Paper trading mode initialized")
    
    def analyze_market(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        
        for symbol in self.data_handler.get_watchlist():
            market_data = self.data_handler.get_market_data(symbol)
            
            if market_data is None or len(market_data) < 100:
                continue
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            for strategy_name, strategy in self.strategies.items():
                signal = strategy.generate_signal(market_data)
                
                if signal != 'hold':
                    signals.append({
                        'symbol': symbol,
                        'strategy': strategy_name,
                        'signal': signal,
                        'price': market_data['close'].iloc[-1],
                        'timestamp': pd.Timestamp.now()
                    })
                    self.logger.info(f"{self.lang_manager.get_text(signal + '_signal')}: {symbol} ({strategy_name})")
        
        return signals
    
    def execute_trades(self, signals: List[Dict]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        for signal in signals:
            try:
                if self.risk_manager.check_risk(signal):
                    if signal['signal'] == 'buy':
                        self._execute_buy(signal)
                    elif signal['signal'] == 'sell':
                        self._execute_sell(signal)
            except Exception as e:
                self.logger.error(f"Trade execution error: {e}")
    
    def _execute_buy(self, signal: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏"""
        if self.mode == 'paper':
            self.logger.info(f"üìù PAPER BUY: {signal['symbol']} at {signal['price']:.2f}")
        else:
            # –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
            try:
                amount = self.risk_manager.calculate_position_size(signal)
                order = self.exchange.create_market_buy_order(
                    symbol=signal['symbol'],
                    amount=amount
                )
                self.logger.info(f"‚úÖ LIVE BUY: {signal['symbol']} - Amount: {amount}")
            except Exception as e:
                self.logger.error(f"‚ùå Buy execution failed: {e}")
    
    def _execute_sell(self, signal: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
        if self.mode == 'paper':
            self.logger.info(f"üìù PAPER SELL: {signal['symbol']} at {signal['price']:.2f}")
        else:
            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
            try:
                amount = self.risk_manager.calculate_position_size(signal)
                order = self.exchange.create_market_sell_order(
                    symbol=signal['symbol'],
                    amount=amount
                )
                self.logger.info(f"‚úÖ LIVE SELL: {signal['symbol']} - Amount: {amount}")
            except Exception as e:
                self.logger.error(f"‚ùå Sell execution failed: {e}")
    
    def monitor_positions(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        pass
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if hasattr(self, 'exchange'):
            try:
                self.exchange.close()
            except:
                pass

# ===== –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ =====

class CryptoTradingAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    def __init__(self, language: str = 'en', mode: str = 'paper', exchange: str = 'binance'):
        self.language = language
        self.mode = mode
        self.exchange = exchange
        self.lang_manager = LanguageManager(language)
        self.logger = setup_logger('trading_agent', language)
        
        self.is_running = False
        self.threads = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_handler = DataHandler(exchange, language)
        self.risk_manager = RiskManager(language)
        self.trading_engine = TradingEngine(
            exchange=exchange,
            mode=mode,
            language=language,
            data_handler=self.data_handler,
            risk_manager=self.risk_manager
        )
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info(self.lang_manager.get_text('initializing_components'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª—é—á–µ–π
        api_key = os.getenv(f'{self.exchange.upper()}_API_KEY')
        api_secret = os.getenv(f'{self.exchange.upper()}_API_SECRET')
        
        if self.mode == 'live' and (not api_key or not api_secret):
            self.logger.error(self.lang_manager.get_text('api_keys_required'))
            raise ValueError(self.lang_manager.get_text('api_keys_missing'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_handler.initialize(api_key, api_secret)
        self.trading_engine.initialize()
        
        self.logger.info(self.lang_manager.get_text('initialization_complete'))
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.is_running = True
        self.logger.info(self.lang_manager.get_text('starting_agent'))
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        data_thread = threading.Thread(target=self._data_loop)
        trading_thread = threading.Thread(target=self._trading_loop)
        monitoring_thread = threading.Thread(target=self._monitoring_loop)
        
        self.threads.extend([data_thread, trading_thread, monitoring_thread])
        
        for thread in self.threads:
            thread.daemon = True
            thread.start()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while self.is_running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.shutdown()
    
    def _data_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                self.data_handler.update_market_data()
                time.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                self.logger.error(f"{self.lang_manager.get_text('data_error')}: {e}")
                time.sleep(10)
    
    def _trading_loop(self):
        """–¶–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        while self.is_running:
            try:
                signals = self.trading_engine.analyze_market()
                if signals:
                    self.trading_engine.execute_trades(signals)
                time.sleep(10)  # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                self.logger.error(f"{self.lang_manager.get_text('trading_error')}: {e}")
                time.sleep(30)
    
    def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                self.risk_manager.monitor_risk()
                self.trading_engine.monitor_positions()
                time.sleep(60)  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                self.logger.error(f"{self.lang_manager.get_text('monitoring_error')}: {e}")
                time.sleep(60)
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.logger.info(self.lang_manager.get_text('shutting_down'))
        self.is_running = False
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.threads:
            thread.join(timeout=5)
        
        self.trading_engine.shutdown()
        self.data_handler.shutdown()
        
        self.logger.info(self.lang_manager.get_text('shutdown_complete'))

# ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='ü§ñ AI Crypto Trading Agent')
    parser.add_argument('--language', '-l', default='en', choices=['en', 'ru'], 
                       help='Language: en, ru')
    parser.add_argument('--mode', '-m', default='paper', choices=['paper', 'live'], 
                       help='Trading mode: paper, live')
    parser.add_argument('--exchange', '-e', default='binance', 
                       help='Exchange: binance, bybit, kucoin, etc.')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —è–∑—ã–∫–æ–≤
    lang_manager = LanguageManager(args.language)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = setup_logger('main', args.language)
    
    logger.info(lang_manager.get_text('welcome'))
    logger.info(lang_manager.get_text('initializing_agent'))
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
        agent = CryptoTradingAgent(
            language=args.language,
            mode=args.mode,
            exchange=args.exchange
        )
        
        agent.initialize()
        agent.run()
        
    except KeyboardInterrupt:
        logger.info(lang_manager.get_text('shutdown'))
        if 'agent' in locals():
            agent.shutdown()
    except Exception as e:
        logger.error(f"{lang_manager.get_text('error')}: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()